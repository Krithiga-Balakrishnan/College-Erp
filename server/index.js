import express from "express";
import bodyParser from "body-parser";
import mongoose from "mongoose";
import cors from "cors";
import dotenv from "dotenv";
import cookieParser from "cookie-parser"; // For parsing cookies
import csrfProtection from "./middleware/csrfMiddleware.js"

import adminRoutes from "./routes/adminRoutes.js";
import studentRoutes from "./routes/studentRoutes.js";
import facultyRoutes from "./routes/facultyRoutes.js";
import { addDummyAdmin } from "./controller/adminController.js";
const app = express();
dotenv.config();

app.use(bodyParser.json({ limit: "30mb", extended: true }));
app.use(bodyParser.urlencoded({ limit: "30mb", extended: true }));
// Configure CORS to allow credentials and localhost:3000
app.use(cors({
  origin: 'http://localhost:3000', // Allow requests from localhost:3000
  credentials: true // Allow cookies to be sent from the frontend
}));

// Middleware to parse cookies (necessary for CSRF protection)
app.use(cookieParser());
app.use(csrfProtection);

// Middleware to log the CSRF token for debugging
app.use((req, res, next) => {
  console.log("CSRF Token:", req.csrfToken()); // Log the CSRF token to the console
  next();
});

// Serve the CSRF token to the frontend at a specific endpoint
app.get("/api/csrf-token", (req, res) => {
  const csrfToken = req.csrfToken(); // This will be generated by csurf middleware
  res.json({ csrfToken: req.csrfToken() });
});

// Error handling for CSRF token validation
app.use((err, req, res, next) => {
  if (err.code === 'EBADCSRFTOKEN') {
    return res.status(403).json({ message: 'Invalid CSRF token' });
  }
  next(err);
});

app.use("/api/admin", adminRoutes);
app.use("/api/faculty", facultyRoutes);
app.use("/api/student", studentRoutes);

// Root route
app.get("/", (req, res) => {
  res.send("Hello to college erp API");
});

const PORT = process.env.PORT || 5001;
mongoose
  .connect(process.env.CONNECTION_URL, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  })
  .then(() => {
    addDummyAdmin(); // Adds a dummy admin on server start
    app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
  })
  .catch((error) => console.log("Mongo Error", error.message));
